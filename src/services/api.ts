import axios from 'axios';
import { InterviewCategory, InterviewDifficulty, InterviewDuration, InterviewSession, InterviewResult } from '../types';

// This would be replaced with your actual API URL in a real application
const API_URL = 'https://api.example.com';

// Mock API client - in a real app, this would make actual HTTP requests
// For now, it returns mock data or simulates async operations

const api = {
  // Auth endpoints
  auth: {
    login: async (email: string, password: string) => {
      // Simulate API call
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          if (email === 'demo@example.com' && password === 'password') {
            resolve({
              user: {
                id: '1',
                name: 'Demo User',
                email: 'demo@example.com'
              },
              token: 'mock-jwt-token'
            });
          } else {
            reject(new Error('Invalid credentials'));
          }
        }, 1000);
      });
    },
    
    register: async (name: string, email: string, password: string) => {
      // Simulate API call
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            user: {
              id: '1',
              name,
              email
            },
            token: 'mock-jwt-token'
          });
        }, 1000);
      });
    },
    
    logout: async () => {
      // Simulate API call
      return new Promise((resolve) => {
        setTimeout(resolve, 500);
      });
    }
  },
  
  // Interview endpoints
  interviews: {
    createSession: async (
      category: InterviewCategory,
      difficulty: InterviewDifficulty,
      duration: InterviewDuration
    ) => {
      // Simulate API call
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            id: `session-${Math.random().toString(36).substr(2, 9)}`,
            status: 'created'
          });
        }, 1000);
      });
    },
    
    getQuestion: async (sessionId: string, questionIndex: number) => {
      // Simulate API call
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            id: `q-${questionIndex}`,
            text: 'Sample question text would be generated by the AI here.',
            questionIndex,
            totalQuestions: 10
          });
        }, 1000);
      });
    },
    
    submitAnswer: async (sessionId: string, questionId: string, answer: string) => {
      // Simulate API call to submit answer for AI evaluation
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            received: true,
            nextQuestion: questionId.endsWith('9') ? null : { id: `q-${parseInt(questionId.split('-')[1]) + 1}` }
          });
        }, 1500);
      });
    },
    
    endSession: async (sessionId: string) => {
      // Simulate API call
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            resultId: `result-${Math.random().toString(36).substr(2, 9)}`
          });
        }, 2000);
      });
    }
  },
  
  // Results endpoints
  results: {
    getResult: async (resultId: string): Promise<InterviewResult> => {
      // Simulate API call
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            id: resultId,
            category: 'Web Development',
            difficulty: 'Medium',
            date: new Date().toISOString(),
            duration: '28 minutes',
            overallScore: 85,
            strengths: [
              'Clear understanding of React fundamentals',
              'Good explanation of component lifecycle',
              'Strong knowledge of hooks and their use cases'
            ],
            improvements: [
              'More depth on performance optimization techniques',
              'Specific examples would strengthen answers'
            ],
            questions: [
              {
                id: 'q1',
                text: 'Explain the difference between React props and state.',
                userAnswer: 'Props are passed from parent components, state is managed within the component itself.',
                feedback: 'Good explanation of the fundamental differences.',
                score: 90,
                keyPoints: [
                  { text: 'Props are passed from parent', met: true },
                  { text: 'State is managed internally', met: true },
                  { text: 'Use cases differentiated', met: true }
                ]
              }
            ]
          });
        }, 1000);
      });
    },
    
    getUserResults: async () => {
      // Simulate API call
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve([
            {
              id: '1',
              category: 'DSA',
              date: '2025-04-15',
              score: 85
            },
            {
              id: '2',
              category: 'Web Development',
              date: '2025-04-10',
              score: 72
            }
          ]);
        }, 1000);
      });
    }
  },
  
  // OpenAI integration endpoints
  ai: {
    generateQuestion: async (category: InterviewCategory, difficulty: InterviewDifficulty) => {
      // In a real app, this would call your backend which would then call OpenAI API
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            question: 'This is a sample question that would be generated by OpenAI based on the category and difficulty.'
          });
        }, 1500);
      });
    },
    
    evaluateAnswer: async (question: string, answer: string) => {
      // In a real app, this would call your backend which would then call OpenAI API
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            score: Math.floor(Math.random() * 30) + 70,
            feedback: 'This is sample feedback that would be generated by OpenAI based on your answer to the question.',
            strengths: ['Point 1', 'Point 2'],
            improvements: ['Area 1', 'Area 2']
          });
        }, 2000);
      });
    }
  }
};

export default api;